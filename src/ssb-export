#!/usr/bin/env python3
# -*- mode: python; coding: utf-8 -*-
"""
Usage: ssb-export [OPTIONS]

optional arguments:
  -h, --help          show this help message and exit
  -v, --version       show version information and exit
  -c, --copyright     show copying policy and exit
or:
  -p, --private-only  export only the private key

An SSB secret is read from standard input and the combination
of the private and the public keys are written to standard
output in base64.

If the option ‘--private-only’ is used, only the private key
proper is shown. The public key can be calculated from both
the long and the short form.
"""
##############################################################################
# This program is free software; you can redistribute it and/or modify it    #
# under the terms of the GNU General Public License as published by the Free #
# Software Foundation; either version 3 of the License, or (at your option)  #
# any later version.                                                         #
#                                                                            #
# This program is distributed in the hope that it will be useful, but with-  #
# out any warranty; without even the implied warranty of merchantability or  #
# fitness for a particular purpose. See the GNU General Public License for   #
# more details.  <http://gplv3.fsf.org/>                                     #
##############################################################################

import sys
import os
import pathlib
import argparse
import binascii
import json

from pprint import pprint

try:
    from locale import (Error, setlocale, LC_ALL)
    _ = setlocale(LC_ALL, '')
except (ImportError, NameError, Error):
    pass

__author__ = 'Klaus Alexander Seistrup <klaus@seistrup.dk>'
__whoami__ = 'ssb-export'
__revision__ = '2018-04-27'
__version__ = '0.1.1 ({})'.format(__revision__)
__copyright__ = """\
ssb-export {}
Copyright © 2017-18 Klaus Alexander Seistrup <klaus@seistrup.dk>

This is free software; see the source for copying conditions. There is no
warranty; not even for merchantability or fitness for a particular purpose.\
""".format(__version__)

DEBUG = os.environ.get('DEBUG', 'False')[0].upper() in '1JTY'  # 1/Ja/True/Yes
EPILOG = """
An SSB secret is read from standard input and the combination
of the private and the public keys are written to standard
output in base64.

If the option ‘--private-only’ is used, only the private key
proper is shown. The public key can be calculated from both
the long and the short form.
"""

(STDIN, STDOUT, STDERR) = (sys.stdin, sys.stdout, sys.stderr)


def debug(head, data=None):
    """Possibly pretty print an object to stderr"""
    if DEBUG:
        pprint(head if data is None else {head: data}, stream=STDERR)


def deuglify(error):
    """Deuglify the EnvironmentError class of errors"""
    debug('ugly', error)

    if not isinstance(error, Exception):
        return error

    nargs = len(error.args)

    if nargs == 1:
        return str(error)

    strerr = getattr(error, 'strerror', None)

    if nargs == 2 and strerr is not None:
        fname1 = getattr(error, 'filename', None)
        fname2 = getattr(error, 'filename2', None)

        if fname1 and fname2:
            return '{}: {} → {}'.format(strerr, fname1, fname2)
        if fname1 or fname2:
            return '{}: {}'.format(strerr, fname1 or fname2)

        return strerr

    # Let's not pretend that we know the nature of the exception
    return error


def die(error=None):
    """Exit gracefully"""
    debug('exit', error)

    if error:
        print(deuglify(error), file=STDERR)

    sys.exit(1 if error else 0)


def read_secret(full=True):
    """Read a ‘secret’ file from standard input"""
    blob = []

    for line in map(lambda s: s.strip(), STDIN):
        if not line:
            continue
        if line.startswith('#'):
            continue
        blob.append(line)

    data = json.loads(''.join(blob))
    private = data.get('private', None)

    if private is None:
        die('Invalid ‘secret’ file: no private key')

    if not private.endswith('.ed25519'):
        die('Invalid private key: {}'.format(private))

    binkey = binascii.a2b_base64(private[:-8])

    if len(binkey) in (64, 32):
        return binkey if full else binkey[:32]

    die('Invalid format of private key')


def base64(blob):
    """Base64 encode a binary blob"""
    return binascii.b2a_base64(blob).decode('us-ascii').strip()


def main(progname=__whoami__):
    """Main entry point"""

    debug('argv', sys.argv)

    parser = argparse.ArgumentParser(
        prog=progname,
        formatter_class=argparse.RawTextHelpFormatter,
        epilog=EPILOG
    )
    parser.add_argument('-v', '--version', action='version',
                        version='%(prog)s/{}'.format(__version__),
                        help='show version information and exit')
    parser.add_argument('-c', '--copyright', action='version',
                        version=__copyright__,
                        help='show copying policy and exit')
    parser.add_argument('-p', '--private-only', action='store_true',
                        default=False, help='export only the private key')

    args = parser.parse_args()
    debug('args', args)

    exitcode = 1

    try:
        secret = read_secret(not args.private_only)
        print(base64(secret))
        exitcode = 0
    except (KeyboardInterrupt, BrokenPipeError):
        die()
    except (UnicodeDecodeError, UnicodeEncodeError) as error:
        die(error)
    except json.JSONDecodeError as error:
        die('JSON invalid: {}'.format(error))
    except (binascii.Error, binascii.Incomplete) as error:
        die('Invalid base64: {}'.format(error))
    except (IOError, OSError) as error:
        die(error)
    # Pylint hates this, but I dislike uncaught exceptions
    except Exception as error:
        die(error)

    return exitcode


if __name__ == '__main__':
    sys.exit(main(pathlib.Path(sys.argv[0]).name))

# eof
