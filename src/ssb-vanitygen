#!/usr/bin/env python3
# -*- mode: python; coding: utf-8 -*-
"""
Usage: ssb vanitygen [OPTIONS] [REGEX]

positional arguments:
  REGEX                 match this regex

optional arguments:
  -h, --help            show this help message and exit
  -v, --version         show version information and exit
  -c, --copyright       show copying policy and exit
  -i, --ignore-case     ignore case distinctions in REGEX
  -n MAXITER, --maxiter MAXITER
                        exit after MAXITER iterations

If no REGEX is given, ssb-vanitygen will generate a random secret.
"""
##############################################################################
# This program is free software; you can redistribute it and/or modify it    #
# under the terms of the GNU General Public License as published by the Free #
# Software Foundation; either version 3 of the License, or (at your option)  #
# any later version.                                                         #
#                                                                            #
# This program is distributed in the hope that it will be useful, but with-  #
# out any warranty; without even the implied warranty of merchantability or  #
# fitness for a particular purpose. See the GNU General Public License for   #
# more details.  <http://gplv3.fsf.org/>                                     #
##############################################################################

import sys
import os
import pathlib
import argparse
import binascii
import re

from pprint import pprint

try:
    from locale import (Error, setlocale, LC_ALL)
    _ = setlocale(LC_ALL, '')
except (ImportError, NameError, Error):
    pass

# 3rd party modules
try:
    import nacl.signing
    import nacl.encoding
except ImportError as imperr:
    print(imperr, file=sys.stderr)
    print("Try 'pip install pynacl'", file=sys.stderr)
    sys.exit(1)

__author__ = 'Klaus Alexander Seistrup <klaus@seistrup.dk>'
__whoami__ = 'ssb-vanitygen'
__revision__ = '2018-04-27'
__version__ = '0.2.1 ({})'.format(__revision__)
__copyright__ = """\
ssb-vanitygen {}
Copyright © 2017-18 Klaus Alexander Seistrup <klaus@seistrup.dk>

This is free software; see the source for copying conditions. There is no
warranty; not even for merchantability or fitness for a particular purpose.\
""".format(__version__)

DEBUG = os.environ.get('DEBUG', 'False')[0].upper() in '1JTY'  # 1/Ja/True/Yes
STDERR = sys.stderr
EPILOG = """
Generate an Ed25519 keypair that matches a given REGEX.
If no REGEX is given, {} will generate a random secret.
""".format(__whoami__)

SECRET = """
# This is your SECRET name.
# This name gives you magical powers.
# With it you can mark your messages so that your friends can verify
# that they really did come from you.
#
# If any one learns this name, they can use it to destroy your identity.
# NEVER show this to anyone!

{{
  "curve": "ed25519",
  "id": "@{pubkey}.ed25519",
  "private": "{privkey}.ed25519",
  "public": "{pubkey}.ed25519"
}}

# WARNING: It's vital that you DO NOT edit OR share your secret name
# instead, share your public name.
# Your public name: @{pubkey}.ed25519
"""


def debug(head, data=None):
    """Possibly pretty print an object to stderr"""
    if DEBUG:
        pprint(head if data is None else {head: data}, stream=STDERR)


def deuglify(error):
    """Deuglify the EnvironmentError class of errors"""
    debug('ugly', error)

    if not isinstance(error, Exception):
        return error

    nargs = len(error.args)

    if nargs == 1:
        return str(error)

    strerr = getattr(error, 'strerror', None)

    if nargs == 2 and strerr is not None:
        fname1 = getattr(error, 'filename', None)
        fname2 = getattr(error, 'filename2', None)

        if fname1 and fname2:
            return '{}: {} → {}'.format(strerr, fname1, fname2)
        if fname1 or fname2:
            return '{}: {}'.format(strerr, fname1 or fname2)

        return strerr

    # Let's not pretend that we know the nature on the exception
    return error


def die(error=None):
    """Exit gracefully"""
    debug('exit', error)

    if error:
        print(deuglify(error), file=STDERR)

    sys.exit(1 if error else 0)


def base64(bytesbuf):
    """Base64 encode a bytes buffer"""
    return binascii.b2a_base64(bytesbuf).decode('us-ascii').strip()


def ssb_vanitygen(regex, maxiter):
    """Find an Ed25519 pubkey that matches REGEX"""
    while maxiter:
        sec = nacl.signing.SigningKey.generate()
        pub = sec.verify_key
        pub64 = pub.encode(
            encoder=nacl.encoding.Base64Encoder
        ).decode('us-ascii')
        if regex.match(pub64):
            return SECRET.format(
                pubkey=pub64,
                privkey=base64(sec.encode() + pub.encode())
            ).strip()
        maxiter -= 1

    return None


def main(progname=__whoami__):
    """Main entry point"""

    debug('argv', sys.argv)

    parser = argparse.ArgumentParser(
        prog=progname,
        formatter_class=argparse.RawTextHelpFormatter,
        epilog=EPILOG
    )
    parser.add_argument('-v', '--version', action='version',
                        version='%(prog)s/{}'.format(__version__),
                        help='show version information and exit')
    parser.add_argument('-c', '--copyright', action='version',
                        version=__copyright__,
                        help='show copying policy and exit')
    parser.add_argument('-i', '--ignore-case', action='store_true',
                        help='ignore case distinctions in REGEX')
    parser.add_argument('-n', '--maxiter', type=int,
                        help='exit after MAXITER iterations')
    parser.add_argument('REGEX', nargs='?', help='match this regex')

    args = parser.parse_args()
    debug('args', args)

    flags = re.IGNORECASE if args.ignore_case else 0
    maxiter = 255 ** 19 if args.maxiter is None else args.maxiter

    if maxiter < 1:
        die('MAXITER must be greater than 1')

    try:
        regex = re.compile(args.REGEX or '.', flags=flags)
        secret = ssb_vanitygen(regex, maxiter)
        if secret is None:
            error = "Didn't find a matching pubkey in {} iterations.".format(
                args.maxiter
            )
            die(error)
        print(secret)
    except KeyboardInterrupt:
        dir()
    except Exception as error:
        die(error)

    return 0


if __name__ == '__main__':
    sys.exit(main(pathlib.Path(sys.argv[0]).name))

# eof
